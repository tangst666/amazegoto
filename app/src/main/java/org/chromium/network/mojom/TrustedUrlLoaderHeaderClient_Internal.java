
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/network/public/mojom/network_context.mojom
//

package org.chromium.network.mojom;

import org.chromium.mojo.bindings.DeserializationException;


class TrustedUrlLoaderHeaderClient_Internal {

    public static final org.chromium.mojo.bindings.Interface.Manager<TrustedUrlLoaderHeaderClient, TrustedUrlLoaderHeaderClient.Proxy> MANAGER =
            new org.chromium.mojo.bindings.Interface.Manager<TrustedUrlLoaderHeaderClient, TrustedUrlLoaderHeaderClient.Proxy>() {

        @Override
        public String getName() {
            return "network.mojom.TrustedURLLoaderHeaderClient";
        }

        @Override
        public int getVersion() {
          return 0;
        }

        @Override
        public Proxy buildProxy(org.chromium.mojo.system.Core core,
                                org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            return new Proxy(core, messageReceiver);
        }

        @Override
        public Stub buildStub(org.chromium.mojo.system.Core core, TrustedUrlLoaderHeaderClient impl) {
            return new Stub(core, impl);
        }

        @Override
        public TrustedUrlLoaderHeaderClient[] buildArray(int size) {
          return new TrustedUrlLoaderHeaderClient[size];
        }
    };


    private static final int ON_BEFORE_SEND_HEADERS_ORDINAL = 0;

    private static final int ON_HEADERS_RECEIVED_ORDINAL = 1;


    static final class Proxy extends org.chromium.mojo.bindings.Interface.AbstractProxy implements TrustedUrlLoaderHeaderClient.Proxy {

        Proxy(org.chromium.mojo.system.Core core,
              org.chromium.mojo.bindings.MessageReceiverWithResponder messageReceiver) {
            super(core, messageReceiver);
        }


        @Override
        public void onBeforeSendHeaders(
int requestId, HttpRequestHeaders headers, 
OnBeforeSendHeadersResponse callback) {

            TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams _message = new TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams();

            _message.requestId = requestId;

            _message.headers = headers;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_BEFORE_SEND_HEADERS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParamsForwardToCallback(callback));

        }


        @Override
        public void onHeadersReceived(
int requestId, String headers, 
OnHeadersReceivedResponse callback) {

            TrustedUrlLoaderHeaderClientOnHeadersReceivedParams _message = new TrustedUrlLoaderHeaderClientOnHeadersReceivedParams();

            _message.requestId = requestId;

            _message.headers = headers;


            getProxyHandler().getMessageReceiver().acceptWithResponder(
                    _message.serializeWithHeader(
                            getProxyHandler().getCore(),
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_HEADERS_RECEIVED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG,
                                    0)),
                    new TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParamsForwardToCallback(callback));

        }


    }

    static final class Stub extends org.chromium.mojo.bindings.Interface.Stub<TrustedUrlLoaderHeaderClient> {

        Stub(org.chromium.mojo.system.Core core, TrustedUrlLoaderHeaderClient impl) {
            super(core, impl);
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.NO_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_OR_CLOSE_PIPE_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRunOrClosePipe(
                                TrustedUrlLoaderHeaderClient_Internal.MANAGER, messageWithHeader);






                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }

        @Override
        public boolean acceptWithResponder(org.chromium.mojo.bindings.Message message, org.chromium.mojo.bindings.MessageReceiver receiver) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(org.chromium.mojo.bindings.MessageHeader.MESSAGE_EXPECTS_RESPONSE_FLAG)) {
                    return false;
                }
                switch(header.getType()) {

                    case org.chromium.mojo.bindings.interfacecontrol.InterfaceControlMessagesConstants.RUN_MESSAGE_ID:
                        return org.chromium.mojo.bindings.InterfaceControlMessagesHelper.handleRun(
                                getCore(), TrustedUrlLoaderHeaderClient_Internal.MANAGER, messageWithHeader, receiver);







                    case ON_BEFORE_SEND_HEADERS_ORDINAL: {

                        TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams data =
                                TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onBeforeSendHeaders(data.requestId, data.headers, new TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }







                    case ON_HEADERS_RECEIVED_ORDINAL: {

                        TrustedUrlLoaderHeaderClientOnHeadersReceivedParams data =
                                TrustedUrlLoaderHeaderClientOnHeadersReceivedParams.deserialize(messageWithHeader.getPayload());

                        getImpl().onHeadersReceived(data.requestId, data.headers, new TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParamsProxyToResponder(getCore(), receiver, header.getRequestId()));
                        return true;
                    }


                    default:
                        return false;
                }
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                System.err.println(e.toString());
                return false;
            }
        }
    }


    
    static final class TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int requestId;
        public HttpRequestHeaders headers;

        private TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams() {
            this(0);
        }

        public static TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new TrustedUrlLoaderHeaderClientOnBeforeSendHeadersParams(elementsOrVersion);
                    {
                        
                    result.requestId = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, false);
                    result.headers = HttpRequestHeaders.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.requestId, 8);
            
            encoder0.encode(this.headers, 16, false);
        }
    }



    
    static final class TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public HttpRequestHeaders headers;

        private TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams() {
            this(0);
        }

        public static TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(16, true);
                    result.headers = HttpRequestHeaders.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
            
            encoder0.encode(this.headers, 16, true);
        }
    }

    static class TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final TrustedUrlLoaderHeaderClient.OnBeforeSendHeadersResponse mCallback;

        TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParamsForwardToCallback(TrustedUrlLoaderHeaderClient.OnBeforeSendHeadersResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_BEFORE_SEND_HEADERS_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams response = TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.headers);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParamsProxyToResponder implements TrustedUrlLoaderHeaderClient.OnBeforeSendHeadersResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, HttpRequestHeaders headers) {
            TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams _response = new TrustedUrlLoaderHeaderClientOnBeforeSendHeadersResponseParams();

            _response.result = result;

            _response.headers = headers;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_BEFORE_SEND_HEADERS_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



    
    static final class TrustedUrlLoaderHeaderClientOnHeadersReceivedParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 24;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(24, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int requestId;
        public String headers;

        private TrustedUrlLoaderHeaderClientOnHeadersReceivedParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public TrustedUrlLoaderHeaderClientOnHeadersReceivedParams() {
            this(0);
        }

        public static TrustedUrlLoaderHeaderClientOnHeadersReceivedParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static TrustedUrlLoaderHeaderClientOnHeadersReceivedParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static TrustedUrlLoaderHeaderClientOnHeadersReceivedParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            TrustedUrlLoaderHeaderClientOnHeadersReceivedParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new TrustedUrlLoaderHeaderClientOnHeadersReceivedParams(elementsOrVersion);
                    {
                        
                    result.requestId = decoder0.readInt(8);
                    }
                    {
                        
                    result.headers = decoder0.readString(16, false);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.requestId, 8);
            
            encoder0.encode(this.headers, 16, false);
        }
    }



    
    static final class TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams extends org.chromium.mojo.bindings.Struct {

        private static final int STRUCT_SIZE = 32;
        private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
        private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
        public int result;
        public String headers;
        public org.chromium.url.mojom.Url allowedUnsafeRedirectUrl;

        private TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams(int version) {
            super(STRUCT_SIZE, version);
        }

        public TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams() {
            this(0);
        }

        public static TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams deserialize(org.chromium.mojo.bindings.Message message) {
            return decode(new org.chromium.mojo.bindings.Decoder(message));
        }

        /**
         * Similar to the method above, but deserializes from a |ByteBuffer| instance.
         *
         * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
         */
        public static TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams deserialize(java.nio.ByteBuffer data) {
            return deserialize(new org.chromium.mojo.bindings.Message(
                    data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
        }

        @SuppressWarnings("unchecked")
        public static TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams decode(org.chromium.mojo.bindings.Decoder decoder0) {
            if (decoder0 == null) {
                return null;
            }
            decoder0.increaseStackDepth();
            TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams result;
            try {
                org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
                final int elementsOrVersion = mainDataHeader.elementsOrVersion;
                result = new TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams(elementsOrVersion);
                    {
                        
                    result.result = decoder0.readInt(8);
                    }
                    {
                        
                    result.headers = decoder0.readString(16, true);
                    }
                    {
                        
                    org.chromium.mojo.bindings.Decoder decoder1 = decoder0.readPointer(24, false);
                    result.allowedUnsafeRedirectUrl = org.chromium.url.mojom.Url.decode(decoder1);
                    }

            } finally {
                decoder0.decreaseStackDepth();
            }
            return result;
        }

        @SuppressWarnings("unchecked")
        @Override
        protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
            org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
            
            encoder0.encode(this.result, 8);
            
            encoder0.encode(this.headers, 16, true);
            
            encoder0.encode(this.allowedUnsafeRedirectUrl, 24, false);
        }
    }

    static class TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParamsForwardToCallback extends org.chromium.mojo.bindings.SideEffectFreeCloseable
            implements org.chromium.mojo.bindings.MessageReceiver {
        private final TrustedUrlLoaderHeaderClient.OnHeadersReceivedResponse mCallback;

        TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParamsForwardToCallback(TrustedUrlLoaderHeaderClient.OnHeadersReceivedResponse callback) {
            this.mCallback = callback;
        }

        @Override
        public boolean accept(org.chromium.mojo.bindings.Message message) {
            try {
                org.chromium.mojo.bindings.ServiceMessage messageWithHeader =
                        message.asServiceMessage();
                org.chromium.mojo.bindings.MessageHeader header = messageWithHeader.getHeader();
                if (!header.validateHeader(ON_HEADERS_RECEIVED_ORDINAL,
                                           org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG)) {
                    return false;
                }

                TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams response = TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams.deserialize(messageWithHeader.getPayload());

                mCallback.call(response.result, response.headers, response.allowedUnsafeRedirectUrl);
                return true;
            } catch (org.chromium.mojo.bindings.DeserializationException e) {
                return false;
            }
        }
    }

    static class TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParamsProxyToResponder implements TrustedUrlLoaderHeaderClient.OnHeadersReceivedResponse {

        private final org.chromium.mojo.system.Core mCore;
        private final org.chromium.mojo.bindings.MessageReceiver mMessageReceiver;
        private final long mRequestId;

        TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParamsProxyToResponder(
                org.chromium.mojo.system.Core core,
                org.chromium.mojo.bindings.MessageReceiver messageReceiver,
                long requestId) {
            mCore = core;
            mMessageReceiver = messageReceiver;
            mRequestId = requestId;
        }

        @Override
        public void call(Integer result, String headers, org.chromium.url.mojom.Url allowedUnsafeRedirectUrl) {
            TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams _response = new TrustedUrlLoaderHeaderClientOnHeadersReceivedResponseParams();

            _response.result = result;

            _response.headers = headers;

            _response.allowedUnsafeRedirectUrl = allowedUnsafeRedirectUrl;

            org.chromium.mojo.bindings.ServiceMessage _message =
                    _response.serializeWithHeader(
                            mCore,
                            new org.chromium.mojo.bindings.MessageHeader(
                                    ON_HEADERS_RECEIVED_ORDINAL,
                                    org.chromium.mojo.bindings.MessageHeader.MESSAGE_IS_RESPONSE_FLAG,
                                    mRequestId));
            mMessageReceiver.accept(_message);
        }
    }



}
