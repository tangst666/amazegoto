
// Copyright 2014 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

// This file is autogenerated by:
//     mojo/public/tools/bindings/mojom_bindings_generator.py
// For:
//     services/device/public/mojom/serial.mojom
//

package org.chromium.device.mojom;

import org.chromium.mojo.bindings.DeserializationException;


public final class SerialDeviceInfo extends org.chromium.mojo.bindings.Struct {

    private static final int STRUCT_SIZE = 32;
    private static final org.chromium.mojo.bindings.DataHeader[] VERSION_ARRAY = new org.chromium.mojo.bindings.DataHeader[] {new org.chromium.mojo.bindings.DataHeader(32, 0)};
    private static final org.chromium.mojo.bindings.DataHeader DEFAULT_STRUCT_INFO = VERSION_ARRAY[0];
    public String path;
    public short vendorId;
    public boolean hasVendorId;
    public short productId;
    public boolean hasProductId;
    public String displayName;

    private SerialDeviceInfo(int version) {
        super(STRUCT_SIZE, version);
        this.hasVendorId = (boolean) false;
        this.hasProductId = (boolean) false;
    }

    public SerialDeviceInfo() {
        this(0);
    }

    public static SerialDeviceInfo deserialize(org.chromium.mojo.bindings.Message message) {
        return decode(new org.chromium.mojo.bindings.Decoder(message));
    }

    /**
     * Similar to the method above, but deserializes from a |ByteBuffer| instance.
     *
     * @throws org.chromium.mojo.bindings.DeserializationException on deserialization failure.
     */
    public static SerialDeviceInfo deserialize(java.nio.ByteBuffer data) {
        return deserialize(new org.chromium.mojo.bindings.Message(
                data, new java.util.ArrayList<org.chromium.mojo.system.Handle>()));
    }

    @SuppressWarnings("unchecked")
    public static SerialDeviceInfo decode(org.chromium.mojo.bindings.Decoder decoder0) {
        if (decoder0 == null) {
            return null;
        }
        decoder0.increaseStackDepth();
        SerialDeviceInfo result;
        try {
            org.chromium.mojo.bindings.DataHeader mainDataHeader = decoder0.readAndValidateDataHeader(VERSION_ARRAY);
            final int elementsOrVersion = mainDataHeader.elementsOrVersion;
            result = new SerialDeviceInfo(elementsOrVersion);
                {
                    
                result.path = decoder0.readString(8, false);
                }
                {
                    
                result.vendorId = decoder0.readShort(16);
                }
                {
                    
                result.hasVendorId = decoder0.readBoolean(18, 0);
                }
                {
                    
                result.hasProductId = decoder0.readBoolean(18, 1);
                }
                {
                    
                result.productId = decoder0.readShort(20);
                }
                {
                    
                result.displayName = decoder0.readString(24, true);
                }

        } finally {
            decoder0.decreaseStackDepth();
        }
        return result;
    }

    @SuppressWarnings("unchecked")
    @Override
    protected final void encode(org.chromium.mojo.bindings.Encoder encoder) {
        org.chromium.mojo.bindings.Encoder encoder0 = encoder.getEncoderAtDataOffset(DEFAULT_STRUCT_INFO);
        
        encoder0.encode(this.path, 8, false);
        
        encoder0.encode(this.vendorId, 16);
        
        encoder0.encode(this.hasVendorId, 18, 0);
        
        encoder0.encode(this.hasProductId, 18, 1);
        
        encoder0.encode(this.productId, 20);
        
        encoder0.encode(this.displayName, 24, true);
    }
}